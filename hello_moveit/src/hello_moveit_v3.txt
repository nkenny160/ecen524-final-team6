#include <memory>
#include <rclcpp/rclcpp.hpp>
#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/task_constructor/task.h>
#include <moveit/task_constructor/stages/move_to.h>
#include <moveit/task_constructor/solvers/pipeline_planner.h>
// #include <franka_gripper/GraspAction.h>

int main(int argc, char* argv[])
{
  // Initialize ROS and create the Node
  rclcpp::init(argc, argv);
  auto const node = std::make_shared<rclcpp::Node>(
      "hello_moveit_gripper", rclcpp::NodeOptions().automatically_declare_parameters_from_overrides(true));

  // Create a ROS logger
  auto const logger = rclcpp::get_logger("hello_moveit_gripper");

  // Create the MoveIt MoveGroup Interface for the arm
  using moveit::planning_interface::MoveGroupInterface;
  auto move_group_interface = MoveGroupInterface(node, "panda_arm");

  // Create MoveIt Task Constructor (MTC) Task
  moveit::task_constructor::Task task("gripper_task");

  // Create a PipelinePlanner for MTC
  auto interpolation_planner = std::make_shared<moveit::task_constructor::solvers::PipelinePlanner>(node);
  interpolation_planner->setProperty("planning_pipeline", "ompl"); // Use your desired planning pipeline

  // Set a target Pose for the arm
  auto const target_pose = [] {
    geometry_msgs::msg::Pose msg;
    msg.orientation.w = 1.0;
    msg.position.x = 0.28;
    msg.position.y = -0.2;
    msg.position.z = 0.5;
    return msg;
  }();

  // Create a MoveTo stage for the arm
  auto stage_move_arm = std::make_unique<moveit::task_constructor::stages::MoveTo>("move arm", interpolation_planner);
  stage_move_arm->setGroup("panda_arm");
  stage_move_arm->setPoseGoal(target_pose);
  task.add(std::move(stage_move_arm));

  // Open the gripper
  auto stage_open_hand = std::make_unique<moveit::task_constructor::stages::MoveTo>("open hand", interpolation_planner);
  stage_open_hand->setGroup("hand"); // Replace with your gripper group name
  stage_open_hand->setGoal("open"); // Replace with your gripper open pose name
  task.add(std::move(stage_open_hand));

  // Close the gripper
  auto stage_close_hand = std::make_unique<moveit::task_constructor::stages::MoveTo>("close hand", interpolation_planner);
  stage_close_hand->setGroup("hand"); // Replace with your gripper group name
  stage_close_hand->setGoal("close"); // Replace with your gripper close pose name
  task.add(std::move(stage_close_hand));

  // Solve the task
  if (task.plan())
  {
    // Execute the task
    task.execute();
  }
  else
  {
    RCLCPP_ERROR(logger, "Task planning failed!");
  }

  // Shutdown ROS
  rclcpp::shutdown();
  return 0;
}
